{
  "name": "robotcode",
  "displayName": "robotcode",
  "description": "Robot Framework support for Visual Studio Code",
  "icon": "images/icon.png",
  "publisher": "d-biehl",
  "version": "0.2.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/d-biehl/robotcode"
  },
  "bugs": {
    "url": "https://github.com/d-biehl/robotcode/issues"
  },
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Programming Languages",
    "Testing",
    "Debuggers",
    "Formatters",
    "Linters"
  ],
  "keywords": [
    "Test",
    "Testing",
    "RobotFramework",
    "Robot Framework",
    "Robot",
    "Keyword Driven"
  ],
  "activationEvents": [
    "workspaceContains:**/*.robot",
    "onDebug",
    "onDebugAdapterProtocolTracker:robotframework",
    "onDebugInitialConfigurations",
    "onDebugDynamicConfigurations",
    "onDebugResolve:robotframework",
    "onLanguage:robotframework",
    "onCommand:robotcode.runTest",
    "onCommand:robotcode.debugTest",
    "onCommand:robotcode.runSuite",
    "onCommand:robotcode.debugSuite"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "robotframework",
        "aliases": [
          "Robot Framework",
          "robotframework"
        ],
        "extensions": [
          ".robot",
          ".resource"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "robotframework",
        "scopeName": "source.robotframework",
        "path": "./syntaxes/robotframework.tmLanguage.json"
      }
    ],
    "keybindings": [
      {
        "key": "tab",
        "command": "type",
        "args": {
          "text": "    "
        },
        "when": "editorTextFocus && editorLangId == robotframework && !editorHasSelection && !inSnippetMode && !suggestWidgetVisible && config.robotcode.editor.4SpacesTab"
      }
    ],
    "configuration": [
      {
        "title": "RobotCode",
        "type": "object",
        "properties": {
          "robotcode.python": {
            "type": "string",
            "default": "",
            "description": "Specifies the python executable to be used for RobotCode. If no path is specified, try to get it from \"python\" extension. Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.editor.4SpacesTab": {
            "type": "boolean",
            "default": true,
            "description": "If actived insert 4 spaces if TAB is pressed."
          },
          "robotcode.languageServer.mode": {
            "type": "string",
            "default": "stdio",
            "description": "Specifies the mode the language server is started. Requires a VSCode restart to take effect.",
            "enum": [
              "stdio",
              "tcp"
            ],
            "scope": "resource"
          },
          "robotcode.languageServer.tcpPort": {
            "type": "number",
            "default": 0,
            "description": "If the port is specified, connect to the language server previously started at the given port. Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.languageServer.args": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Specifies the arguments to be passed to the language server (i.e.: [\"--log\", \"--log-file=~/robotcode.log\"]). Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.debugAdapter.mode": {
            "type": "string",
            "default": "stdio",
            "description": "Specifies the mode the debug adapter is started. Requires a VSCode restart to take effect.",
            "enum": [
              "stdio",
              "tcp"
            ],
            "scope": "resource"
          },
          "robotcode.debugAdapter.tcpPort": {
            "type": "number",
            "default": 0,
            "description": "If the port is specified, connect to the debug adapter previously started at the given port. Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.debugAdapter.host": {
            "type": "string",
            "default": null,
            "description": "If the host is specified, connect to the debug adapter previously started at the given host. Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.debugAdapter.args": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Specifies the arguments to be passed to the debug adapter (i.e.: [\"--log\", \"--log-file=~/debug-adapter.log\"]). Requires a VSCode restart to take effect.",
            "scope": "resource"
          },
          "robotcode.robot.args": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Specifies the arguments to be passed to robot module.",
            "scope": "resource"
          },
          "robotcode.robot.pythonPath": {
            "type": "array",
            "default": [
              "./lib",
              "./resources"
            ],
            "items": {
              "type": "string"
            },
            "description": "Specifies additional python paths to robotframework. Corresponds to the '--pythonpath' option of the robot module.",
            "scope": "resource"
          },
          "robotcode.robot.env": {
            "type": "object",
            "default": {},
            "description": "Specifies the environment variables for robotframework.",
            "scope": "resource"
          },
          "robotcode.robot.variables": {
            "type": "object",
            "default": {},
            "description": "Specifies the variables for robotframework. Corresponds to the '--variable name:value' option of the robot module.",
            "scope": "resource"
          },
          "robotcode.robot.outputDir": {
            "type": "string",
            "default": "results",
            "description": "Specifies the output directory where robotframework saves output files.",
            "scope": "resource"
          },
          "robotcode.debug.defaultConfiguration": {
            "type": "object",
            "default": {},
            "description": "Specifies the default configuration to run or debug robot tests.",
            "scope": "resource"
          },
          "robotcode.debug.defaultConsole": {
            "type": "string",
            "enum": [
              "internalConsole",
              "integratedTerminal",
              "externalTerminal"
            ],
            "default": "integratedTerminal",
            "enumDescriptions": [
              "No terminal (pipes the output to the client debug console).",
              "Use terminal integrated in client.",
              "External terminal (configured in user settings)."
            ],
            "description": "Default setting for where to launch the debug target: internal console, integrated terminal, or external terminal.",
            "scope": "resource"
          },
          "robotcode.syntax.sectionStyle": {
            "type": "string",
            "default": "*** {name}s ***",
            "description": "Defines the section style format.",
            "scope": "resource"
          },
          "robotcode.run.openReportAfterRun": {
            "type": "boolean",
            "default": false,
            "description": "Defines if the test report should be opened a run session automatically.",
            "scope": "resource"
          },
          "robotcode.robocop.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enables 'robocop' code analysis, if installed. See [robocop](https://github.com/MarketSquare/robotframework-robocop)",
            "scope": "resource"
          },
          "robotcode.robocop.include": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Ignore specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
            "scope": "resource"
          },
          "robotcode.robocop.exclude": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Ignore specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
            "scope": "resource"
          },
          "robotcode.robocop.configurations": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Configure 'robocop' checker with parameter value.",
            "scope": "resource"
          },
          "robotcode.robotidy.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enables 'robotidy' code formatting, if installed. See [robotidy](https://github.com/MarketSquare/robotframework-tidy)",
            "scope": "resource"
          }
        }
      }
    ],
    "breakpoints": [
      {
        "language": "robotframework"
      }
    ],
    "debuggers": [
      {
        "type": "robotcode",
        "label": "RobotCode Debug",
        "languages": [
          "robotframework"
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "target": {
                "type": "string",
                "description": "The .robot file or a folder containing .robot files to be launched.",
                "default": "${file}"
              },
              "args": {
                "type": "array",
                "description": "Specifies additional command line arguments passed to robot.",
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                "default": "${workspaceFolder}"
              },
              "env": {
                "type": "object",
                "description": "Environment variables defined as a key value pair.",
                "default": []
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "No terminal (pipes the output to the client debug console).",
                  "Use terminal integrated in client.",
                  "External terminal (configured in user settings)."
                ],
                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                "default": "integratedTerminal"
              },
              "python": {
                "type": "string",
                "description": "Specifies the python interpreter to use. If not specified, the python interpreter defined for the extension is used.",
                "default": null
              },
              "robotPythonPath": {
                "type": "array",
                "description": "Specifies additional python paths for robotframework. Corresponds to the '--pythonpath' option of the robot module.",
                "default": []
              },
              "attachPython": {
                "type": "boolean",
                "description": "Attach also the python debugger if a robot test starts.",
                "default": false
              },
              "pythonConfiguration": {
                "type": "object",
                "description": "Defines a template for the python launch configuration.",
                "default": {}
              },
              "variables": {
                "type": "object",
                "default": {},
                "description": "Specifies the variables for robotframework. Corresponds to the '--variable name:value' option of the robot module."
              },
              "launcherArgs": {
                "type": "array",
                "description": "Command line arguments passed to launcher.",
                "default": []
              },
              "launcherTimeout": {
                "type": "number",
                "description": "Timeout to connect to the debuggee.",
                "default": 5
              },
              "outputDir": {
                "type": "string",
                "default": null,
                "description": "Specifies the output directory where robotframework saves output files."
              },
              "outputMessages": {
                "type": "boolean",
                "description": "Output messages from robotframework in debug console.",
                "default": false
              },
              "outputLog": {
                "type": "boolean",
                "description": "Output log messages from robotframework in debug console.",
                "default": false
              },
              "groupOutput": {
                "type": "boolean",
                "description": "Group start and stop suite/test/keyword messages in debug console.",
                "default": false
              }
            }
          }
        },
        "initialConfigurations": [],
        "configurationSnippets": [
          {
            "label": "RobotCode: Launch .robot file",
            "description": "Add a new configuration for launching Robot Framework Tests.",
            "body": {
              "type": "robotcode",
              "name": "RobotCode: Launch .robot file",
              "request": "launch",
              "cwd": "^\"\\${workspaceFolder}\"",
              "target": "^\"\\${file}\"",
              "env": {},
              "args": []
            }
          }
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "test-compile": "tsc -p ./",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint --ext .ts,.tsx,.js .",
    "lint-fix": "eslint --ext .ts,.tsx,.js --fix .",
    "test": "node ./out/test/runTest.js",
    "download-api": "vscode-dts dev",
    "postdownload-api": "vscode-dts main",
    "_postinstall": "npm run download-api",
    "version": "node scripts/updateVersions.js && git add ."
  },
  "extensionDependencies": [
    "ms-python.python"
  ],
  "dependencies": {
    "ansi-colors": "^4.1.1",
    "vscode-debugadapter": "^1.49.0",
    "vscode-languageclient": "^7.0.0"
  },
  "devDependencies": {    
    "@types/mocha": "^9.0.0",
    "@types/node": "^16.9.4",
    "@types/vscode": "^1.60.0",
    "@typescript-eslint/eslint-plugin": "^4.31.2",
    "@typescript-eslint/parser": "^4.31.2",
    "eslint": "^7.32.0",
    "eslint-config-airbnb": "^18.2.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-config-standard": "^16.0.3",
    "eslint-config-standard-with-typescript": "21.0.1",
    "eslint-plugin-import": "^2.24.2",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-react": "^7.26.0",
    "eslint-plugin-react-hooks": "^4.2.0",    
    "mocha": "^9.1.1",
    "prettier": "^2.4.1",
    "replace-in-file": "^6.2.0",
    "ts-loader": "^9.2.6",
    "typescript": "^4.4.3",
    "vsce": "^1.99.0",
    "vscode-debugadapter-testsupport": "^1.49.0",
    "vscode-dts": "^0.3.1",
    "vscode-test": "^1.6.1",
    "webpack": "^5.53.0",
    "webpack-cli": "^4.8.0"
  }
}
